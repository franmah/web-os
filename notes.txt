

- BUG: open two windows. Click the first one. It should show up in front. Click on the desktop, the other window will show in front
  - on new Window opened
  - on window clicked
  - on window closed
  - (check windows 11) maximize placeholders should show behind window but in front of other windows
      - Idea: instead of increasing zIndex by 1 for each window, do it by an offset (like 10), so that each window can set different z-index in its children

- change 'selected' to 'focused'

- double clicking resize top should height maximize

- use memo on window.tsx. I know it caused bugs in the past, but since it has every state there shouldn't be any problem

// Final steps
- test everything
- run npm outdate
- test again
- refactor (window.tsx and windowManager.tsx)

// TODO: OTHER

- Check typescript 5.0 and run npm update

- Bug: desktop image doesn't load right away. Maybe the background image should be it's own process?
  - also need a loading screen while starting processes load.
  The loading animation leaves the screen once everything is loaded.

- Look at next's documentation (like react)

- Use semantic html tags instead of div wherever possible + USE FRAGMENT wherever possible to reduce nujmber of container divs
  - https://developer.mozilla.org/en-US/docs/Web/HTML/Element
  - https://developer.mozilla.org/en-US/docs/Web/HTML/Element
  - Lists should use <ul><li><ul/>

- add tests. Especially for services
  
- Change to styled components so that variables are not defined multiple times
  - Fix the z-index madness
  - (update to fit styled components) window border radius size should be a global style and applied to header, hello and window

- Minimize should be done later (needs shortcut bar to work)
  could be done either hiding window or tell processLoader not to render because it's minimized (add minimize function to useProcessContextState)


- Folders on desktop should be like windows (meaning have their own move state)

- Use convention name for event listeners and event listener handlers passed as prop https://react.dev/learn/responding-to-events:
  - Rename event function by handle... 
  - when passed as props it should be named onSomething...
  - rename event to 'e', example: onClick={e => doSomething(e)}. Don't rename it in the function, example: const doSomething(event) => ...
  - Add e.preventDefault(). This will avoid side effect such as triggering a new render when clicking a page. (make sure to test after doing so)

- look into using classes for services and having indepency injection