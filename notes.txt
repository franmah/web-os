// WORKING ON

1. Desktop icons
OK - Create a constant file with icon paths
OK - Add missing icons
  - unkown extension
  - youtube
OK - Create function in file system service to get extension from a file (not a path (single resonsibility))
OK - Complete IconService function for desktop items to get their icons.
OK - IconService function getDesktopIconPath... should be more generic (not just for desktop)

2. File or folder
OK - Create a isDirectory in FileSystem context
  should return true if file has no extension.

OK 2.5 Add more test files (at least one youtube and one text file)

OK 2.7 Explorer:
  - Fix icons in explorer (should use fileName extension)

OK 4.5 FIX DESKTOP SELECTION BOX (items don't get selected.)
  - probably because of the item.id change.

OK 4.55 Fix items not moving on desktop

4.6 Renaming
  - fix renaming items not working
- Create a function to validate names.
  For now files are not allowed to go without an extension in their name.
- Update desktop and explorer to use validation function just above when renaming.

2.6
- Donwload 1024*1024 actual png icons and replace the current ones. Every icon should have the same size.

5. Refactor ExplorerFile
- remove extra fields (icon path, make children optional...)

6. general refactor
- improve desktop file name display
- Fix window header icon

5. Refactor "folder" usage to "directory"

/////////////////// MVP ///////////////
1. Explorer app
  - side menu
  - show path in the top
  - previous/next
  - search
  - can select files
  - can open files
  - can create files

1.5 
EXTENSIONS they have to work!!
and change file system to use actual FS style (use string path instead of ExplorerItem)
2. Apps
- can create youtube, txt and folder
- can open youtube and txt files
- can save txt files.

3. Taskbar
- show open app
- pin Apps
- slide icons

4. Windows menu
- show apps 

////// IN PROGRESS:

=> Using extensions
  - add icons
  - Updates ExplorerFile to have an extension
  - ItemsContainerComponent should let DesktopComponent know that there's a new file or folder that was created.

/////// TODO: in other

FileSystem
  - update functions to match node.js file system.
  
Desktop:
  - Refactor the way new files and folders are created.

Explorer
  - explorer goes out of window when making window too small.
  - explorer path doesn't work exactly like windows 11. It's not supposed to show the whole current path
    but the path from the start (example, click on Documents in quick access will show Documents in the explorer bar.
    Not C:\users\user\Documents\) and then push as user clicks folders.
  - previous and next button in Explorer don't work perfectly. They should keep track of the current index in the flow
    instead of comparing the current path to the first and last position in the flow.
    (what if someone clicks a folder shortcut that happens to be the same as the first folder in the flow. It will think it's at the begginning)
  - implement date modifed and other columns in file view header
  - add sorting by columns other than Name
  - need to improve code for search bar.
  - handle long paths in explorer bar (should show '...' at the begginning)


- explore idea of window manager having a windowFocused state.
    - Since only one window can be focused at a time

- Finish looking at react documentation.

- Look at next's documentation

- Change to styled components so that variables are not defined multiple times
  - Fix the z-index madness (if possible)
  - (update to fit styled components) window border radius size should be a global style and applied to header, hello and window
  - use consts as much as possible
      - color for window header text and buttons should be the setMaximizeMenuListeners
      
- Try to replace calls to getElementById to useRefs 
- add tests. Especially for services

- Bug: desktop image doesn't load right away. Maybe the background image should be it's own process?
  - also need a loading screen while starting processes load.
  The loading animation leaves the screen once everything is loaded.

- Use convention name for event listeners and event listener handlers passed as prop https://react.dev/learn/responding-to-events:
  - Rename event function by handle... 
  - when passed as props it should be named onSomething...
  - rename event to 'e', example: onClick={e => doSomething(e)}. Don't rename it in the function, example: const doSomething(event) => ...
  - Add e.preventDefault(). This will avoid side effect such as triggering a new render when clicking a page. (make sure to test after doing so)

- look into using classes for services and having indepency injection

- file system
  - readdir should return a list of string. The deskop component should then transform those strings in DesktopItems using the files' extension

//////
Requirement for Notepad:
    - should open files with text
    - should save text
    - can be opened by textEditor but show loss of format error message popup

    - header
      - icon
      - multiple pages
      - add page buttons
      - pages have remove buttons
      - (text in) pages are independent
      
    - second header
      - File, edit, view buttons
      - settings page and icon

    - Settings page
      - information on the right
      - App theme
      - Font
      - Opening files button disabled (with comment // TODO later)

    - footer
      - Make it a window component? (like header) controlled by process?
      - show ln, col, and other things if possible


///////////////      MVP      ///////////////

- README.md udpated

- Desktop & Explorer:
  - create new text file in right click menu context.

- Apps:
  - Explorer app (with files)
  - Youtube player (accept a link and then play a video)
  - Text editor
  - Video player (plays .mp4, .mkv.... videos)
  - Maybe Diablo I?

- Files:
  - exe files.
  - shortcut (create and use)
  - extension (.txt, .doc, .youtube...)

- FileSystem
  - Files other than folder on desktop
  - extension system (in the name and in the file object)
  - add files (save to localStorage in base 64)
  - read files (convert from base 64 and make sure it's readable.)
  - Save Files from computer by dropping them onto desktop
    - https://stackoverflow.com/questions/19119040/how-do-i-save-and-restore-a-file-object-in-local-storage
    - Store a whole object, not just content. This way if people save things it can be retrieved. The object should have a name, type, content, path
    - Set limit to how long to store objects in local storage.

- Taskbar
  - pin app
  - see opened app
  - click app to start it
  - click opened app to show it
  - minimize and maximize work with windows.

- Taskbar Windows icon
  works

