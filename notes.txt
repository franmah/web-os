- Use the code in processRendererComponent to create a window Manager. The window manager should only pass a starting position to the window for now.
    - Remove processRendererComponent

    Lifting up the state to the Window manager:
    Solution 1:
      The window manager pass functions as props, such as handleWindowMove, handleWindowDoneMoving, handleMaximize.
      Pros: only one state, the one in the window manager.
      Cons: the window manager is doing the heavy lifting. I think I'd prefer if the window can handle itsefl?
      Questions:
        - What should the window and the window manager be responsible for?
          Should the window move on its own or tell parent that it should be moved.
          If the window was to be resuable, with this solution every parent/manager will have to know how to move the window.
          That's a lot of logic, but maybe they need to do that to bound the window itself. Maybe the window shouldn't know
          its own bound, or when to maximize (meaning it shouldn't know when it hit a border, the manager should)

    Solution 2
      useRef works and will update the local position. But when calling the service, you'll need to juggle between using the local useRef and the state
      Example: When moving window, pass the local updated position (useRef) to the service and update the actual lifted state in window manager.
      - The service could be changed to a class that takes in parameters like bounding variables.

      Pros: easier solution, not much to change.
      Cons: two "copies" of the state (even though they're technically synced)



- BUG: because the window will use mouseY as top when moving, the window will shift when start moving.
    - Don't use mouse as top but rather find the offset.
- BUG: when unselected, header text should change color.

- Window need to be optimized with memo
- Window should not know about process context, closign process shoud be done by window manager
- Window should not know about the process it contains (remove processId in window params)

- BUG: Fix error message in processRendererComponent for windowsParams

- Should I use useReducer to manage the window's state?

// Final steps
- test everything
- run npm outdate
- test again

// TODO in another branch

- Look into moving <style> with animations to metadata (https://developer.mozilla.org/en-US/docs/Web/HTML/Element#document_metadata) and loading all animation in the same tag. If it's goog practice
  
- Look at next's documentation (like react)

- Use semantic html tags instead of div wherever possible + USE FRAGMENT wherever possible to reduce nujmber of container divs
  - https://developer.mozilla.org/en-US/docs/Web/HTML/Element
  - https://developer.mozilla.org/en-US/docs/Web/HTML/Element
  - Lists should use <ul><li><ul/>

  
- Change to styled components so that variables are not defined multiple times
  - Fix the z-index madness
  - (update to fit styled components) window border radius size should be a global style and applied to header, hello and window

- Finish performance improved new Desktop item component (memo). AS WELL AS OTHER IMPROVEMENTS AND OTHER COMPONENTS (useMemo, memo and useCallback)
  - window header should be memo()
  - try useCallback without memo's second argument (areItemsSame)

- Minimize should be done later (needs shortcut bar to work)
  could be done either hiding window or tell processLoader not to render because it's minimized (add minimize function to useProcessContextState)

- Fix the whole Process parameters mess. The Directory could have a process component and default parameters. A Loaded Process could have a more defined model (with an id...)

- Folders on desktop should be like windows (meaning have their own move state)

- Use convention name for event listeners and event listener handlers passed as prop https://react.dev/learn/responding-to-events:
  - Rename event function by handle... 
  - when passed as props it should be named onSomething...
  - rename event to 'e', example: onClick={e => doSomething(e)}. Don't rename it in the function, example: const doSomething(event) => ...
  - Add e.preventDefault(). This will avoid side effect such as triggering a new render when clicking a page. (make sure to test after doing so)